//
//  UITableView+CLEmptyView.m
//  一对多教程
//
//  Created by hezhijingwei on 2017/7/12.
//  Copyright © 2017年 秦传龙. All rights reserved.
//

#import "UITableView+CLEmptyView.h"
#import <objc/message.h>
#import "CLEmptySaleView.h"


@interface UITableView ()

@property (nonatomic, strong) CLEmptySaleView *emptySaleView;
@property (nonatomic, assign) BOOL isFirst;

@end


@implementation UITableView (CLEmptyView)

+ (void)load {
    
    static dispatch_once_t onceToken;
    dispatch_once(&onceToken, ^{
        
        [self methodSwizzlingWithOriginalSelector:@selector(reloadData) bySwizzlingedSelector:@selector(new_reloadData)];
        
    });
    
}


- (void)setEmptyImage:(NSString *)emptyImage {
    
    objc_setAssociatedObject(self, @selector(emptyImage), emptyImage, OBJC_ASSOCIATION_COPY_NONATOMIC);
    
}

- (NSString *)emptyImage {
    
    return objc_getAssociatedObject(self, @selector(emptyImage));
    
}


- (void)setEmptyTitle:(NSString *)emptyTitle {

    objc_setAssociatedObject(self, @selector(emptyTitle), emptyTitle, OBJC_ASSOCIATION_COPY_NONATOMIC);

}

- (NSString *)emptyTitle {
    
    return objc_getAssociatedObject(self, @selector(emptyTitle));
    
}

- (void)setEmptySaleView:(CLEmptySaleView *)emptySaleView {
    
    objc_setAssociatedObject(self, @selector(emptySaleView), emptySaleView, OBJC_ASSOCIATION_RETAIN_NONATOMIC);
    
}

- (CLEmptySaleView *)emptySaleView {
    
    CLEmptySaleView *emptySaleView = objc_getAssociatedObject(self, @selector(emptySaleView));
    
    if (emptySaleView == nil) {
        
        CGRect frame = self.bounds;
        frame.origin.y = self.tableHeaderView.frame.size.height;
        frame.size.height = self.bounds.size.height - self.tableHeaderView.frame.size.height-self.tableFooterView.frame.size.height;
        emptySaleView = [[CLEmptySaleView alloc] initWithFrame:frame];
        self.emptySaleView = emptySaleView;
        emptySaleView.hidden = YES;
        emptySaleView.imageNamed = self.emptyImage;
        emptySaleView.title = self.emptyTitle;
        [self addSubview:emptySaleView];
    }
    return emptySaleView;
}


- (void)setIsFirst:(BOOL)isFirst {
    
    objc_setAssociatedObject(self, @selector(isFirst), @(isFirst), OBJC_ASSOCIATION_ASSIGN);
    
}


- (BOOL)isFirst {
    
    return objc_getAssociatedObject(self, @selector(isFirst));
    
}


- (void)new_reloadData {
    
    BOOL isEmpty = [self checkIsEmpty];
    
    if (isEmpty) {
        
        if (self.isFirst) {
            self.emptySaleView.hidden = NO;
        }

    } else {
        
        self.emptySaleView.hidden = YES;
        
    }

    self.isFirst = YES;
    [self new_reloadData];
}

- (BOOL)checkIsEmpty {
        
    NSUInteger sections = 1;
    NSUInteger row = 0;
    
    if ([self.dataSource respondsToSelector:@selector(numberOfSectionsInTableView:)]) {
        sections = [self.dataSource numberOfSectionsInTableView:self];
    }
    
    for (NSInteger index = 0; index < sections;index ++) {
        
        if ([self.dataSource respondsToSelector:@selector(tableView:numberOfRowsInSection:)]) {
            row = [self.dataSource tableView:self numberOfRowsInSection:index];
        }
        
        // 如果有一个数据说明数据存在   直接返回不是空的 并终止方法
        if (row) {
            return NO;
        }
    }
    return YES;
}





+ (void)methodSwizzlingWithOriginalSelector:(SEL)originalSelector bySwizzlingedSelector:(SEL)swizzledSelector {
    
    Method originalMethod = class_getInstanceMethod([self class], originalSelector);
    Method swizzledMethod = class_getInstanceMethod([self class], swizzledSelector);
    
    BOOL didAddMethod = class_addMethod([self class], originalSelector, method_getImplementation(swizzledMethod), method_getTypeEncoding(swizzledMethod));;
    
    if (didAddMethod) {
        class_replaceMethod([self class], swizzledSelector, method_getImplementation(originalMethod), method_getTypeEncoding(originalMethod));
    } else {
        method_exchangeImplementations(originalMethod, swizzledMethod);
    }
}

@end
